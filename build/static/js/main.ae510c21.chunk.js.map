{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","htmlFor","type","placeholder","onChange","prototype","PropTypes","func","isRequired","Cita","eliminarCitas","onClick","object","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","console","log","nuevoArrayCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ae510c21.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport uuid from \"uuid/dist/v4\";\nimport PropTypes from 'prop-types';\n\nconst Formulario = ( {crearCita} ) => {\n  // Crear State de citas\n\n  const [cita, actualizarCita] = useState({\n    mascota: \"\",\n    propietario: \"\",\n    fecha: \"\",\n    hora: \"\",\n    sintomas: \"\",\n  });\n\n  // state que actualiza si hay un error en el formulario\n  const [error, actualizarError] = useState(false);\n\n  // Funcion que se ejecuta cada vez que un usuario ejecuta un input\n  const actualizarState = (e) => {\n    // Se usa el segundo parametro pasado en el state, la funcion\n    actualizarCita({\n      // se crea una copia del state cita y luego se guarda el valor dependiendo del nombre del input\n      ...cita,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // Destructuring del state; Extraer los valores para agregar value a input y foormatear el form mas adelante\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\n\n  // Evento submti\n  const submitCita = (e) => {\n    e.preventDefault();\n\n    // Validar\n    if (\n      mascota.trim() === \"\" ||\n      propietario.trim()=== \"\" ||\n      fecha.trim()===\"\" ||\n      hora.trim()===\"\" ||\n      sintomas.trim()===\"\"\n    ) {\n      actualizarError(true);\n      return;      \n    }\n    else {\n      actualizarError(false);\n    }\n\n    // Asignar ID\n    cita.id = uuid();\n    \n    // Crear la cita en el state principal\n    crearCita(cita);\n    // Reiniciar el form\n    actualizarCita({\n      mascota: \"\",\n      propietario: \"\",\n      fecha: \"\",\n      hora: \"\",\n      sintomas: \"\"\n    })\n  };\n\n  return (\n    <Fragment>\n      <h2>Crear Cita</h2>\n\n      {error ? (\n        <p className=\"alerta-error\">Todos los campos son obligatorios</p>\n      ) : null}\n      <form onSubmit={submitCita}>\n        <label htmlFor=\"\">Nombre Mascota</label>\n        <input\n          type=\"text\"\n          name=\"mascota\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Mascota\"\n          onChange={actualizarState}\n          value={mascota}\n        />\n        <label htmlFor=\"\">Nombre Dueño</label>\n        <input\n          type=\"text\"\n          name=\"propietario\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Dueño\"\n          onChange={actualizarState}\n          value={propietario}\n        />\n        <label htmlFor=\"\">Fecha</label>\n        <input\n          type=\"date\"\n          name=\"fecha\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={fecha}\n        />\n        <label htmlFor=\"\">Hora</label>\n        <input\n          type=\"time\"\n          name=\"hora\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={hora}\n        />\n        <label htmlFor=\"\">Síntomas</label>\n        <textarea\n          name=\"sintomas\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={sintomas}\n        ></textarea>\n        <button type=\"submit\" className=\"u-full-width button-primary\">\n          Agregar Cita\n        </button>\n      </form>\n    </Fragment>\n  );\n};\n \nFormulario.prototype = {\n  crearCita: PropTypes.func.isRequired\n}\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Cita = ({cita, eliminarCitas}) => (\n  <div className=\"cita\">\n    <p>Mascota: <span>{cita.mascota}</span></p>\n    <p>Dueño: <span>{cita.propietario}</span></p>\n    <p>Fecha: <span>{cita.fecha}</span></p>\n    <p>Hora: <span>{cita.hora}</span></p>\n    <p>Sintomas: <span>{cita.sintomas}</span></p>\n\n    <button\n      className=\"button eliminar u-full-width\"\n      onClick = {() => eliminarCitas(cita.id)}\n      >Eliminar &times;\n    </button>\n  </div>\n);\n \nCita.prototype = {\n  cita: PropTypes.object.isRequired,\n  eliminarCitas: PropTypes.func.isRequired\n}\nexport default Cita;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n\n\n  // Citas en localStorage\n\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n\n  // state: arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales); \n\n  // UseEfect para realziar cierta operaciones cuando el state cambia\n  useEffect( () => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas]);\n\n  // Funcion que toma las cita actuales y agrega la nueva\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  }\n\n  //  Funcion que elimina una cita por su id\n  const eliminarCitas = id => {\n    console.log(\"Eliminando cita...\");\n    const nuevoArrayCitas = citas.filter(cita => cita.id !== id)\n    guardarCitas(nuevoArrayCitas)\n  }\n\n  //  Mensaje condicional\nconst titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas'\n\n  return (\n    <Fragment>\n      <h1>Administración de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\" >\n          <div className=\"one-half column\">\n              <Formulario \n                crearCita = {crearCita}\n              />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {\n              citas.map(cita =>(\n                <Cita\n                  key={cita.id}\n                  cita = {cita}\n                  eliminarCitas = {eliminarCitas}\n                />\n              ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}